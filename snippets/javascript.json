{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Heading comment": {
		"prefix": "docc",
		"body": [
			"/**",
			" * $1",
			" */"
		],
		"description": "Heading comment"
	},

	"Console log": {
		"prefix": "console.log",
		"body": [
			"console.log(`$1`);",
		],
		"description": "Log output to console"
	},

	"IIFE": {
		"prefix": "closure",
		"body": [
			"(function(){",
			"\t$1",
			"})();"
		],
		"description": "Create immediately invoked function expression"
	},

	"getElementById": {
		"prefix": "getElementById",
		"body": [
			"document.getElementById('$1')${2:;}",
		],
		"description": "Get element by id"
	},

	"querySelector": {
		"prefix": "querySelector",
		"body": [
			"document.querySelector('$1')${2:;}",
		],
		"description": "Get element by css selector"
	},

	"querySelectorAll": {
		"prefix": "querySelectorAll",
		"body": [
			"document.querySelectorAll('$1')${2:;}",
		],
		"description": "Get elements by css selector"
	},

	"map": {
		"prefix": "map",
		"body": [
			"${1:array}.map((${2:item}, index)=>{",
			"\t$3",
			"})${4:;}",
		],
		"description": "Array map method"
	},

	"filter": {
		"prefix": "filter",
		"body": [
			"${1:array}.filter((${2:item})=>{",
			"\t$3",
			"})${4:;}",
		],
		"description": "Array filter method"
	},

	"reduce": {
		"prefix": "reduce",
		"body": [
			".reduce((itemsMap, currentValue, index) => { ",
			"\titemsMap[index] = ${1:currentValue};",
			"\treturn itemsMap;",
			"}, {})",
		],
		"description": "Array reduce to object"
	},

	"promise": {
		"prefix": "promise",
		"body": [
			"new Promise((resolve, reject) => {",
			"\t$1",
			"});",
		],
		"description": "Promise constructor"
	},

	"then": {
		"prefix": "then",
		"body": [
			".then(($1) => $2);",
		],
		"description": "promise.then()"
	},

	"arrow_function_void": {
		"prefix": "function",
		"body": [
			"() => {",
			"\t$1",
			"};",
		],
		"description": "Arrow function {}"
	},

	"arrow_function": {
		"prefix": "function",
		"body": [
			"() => $1",
		],
		"description": "Arrow function"
	},
}